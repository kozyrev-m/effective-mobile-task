// Code generated by MockGen. DO NOT EDIT.
// Source: internal/integration/integration.go
//
// Generated by this command:
//
//	mockgen -source=internal/integration/integration.go -destination=internal/integration/mocks/agent.go
//
// Package mock_integration is a generated GoMock package.
package mock_integration

import (
	context "context"
	reflect "reflect"

	entities "github.com/kozyrev-m/effective-mobile-task/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIntegration is a mock of Integration interface.
type MockIntegration struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationMockRecorder
}

// MockIntegrationMockRecorder is the mock recorder for MockIntegration.
type MockIntegrationMockRecorder struct {
	mock *MockIntegration
}

// NewMockIntegration creates a new mock instance.
func NewMockIntegration(ctrl *gomock.Controller) *MockIntegration {
	mock := &MockIntegration{ctrl: ctrl}
	mock.recorder = &MockIntegrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegration) EXPECT() *MockIntegrationMockRecorder {
	return m.recorder
}

// ReceiveAndSet mocks base method.
func (m *MockIntegration) ReceiveAndSet(ctx context.Context, person entities.Person) (*entities.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveAndSet", ctx, person)
	ret0, _ := ret[0].(*entities.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveAndSet indicates an expected call of ReceiveAndSet.
func (mr *MockIntegrationMockRecorder) ReceiveAndSet(ctx, person any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveAndSet", reflect.TypeOf((*MockIntegration)(nil).ReceiveAndSet), ctx, person)
}
